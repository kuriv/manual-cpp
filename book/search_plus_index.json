{"./":{"url":"./","title":"C++","keywords":"","body":"C++ C++ 是一种计算机高级程序设计语言，由 C 语言扩展升级而产生。 "},"docs/新启程.html":{"url":"docs/新启程.html","title":"新启程","keywords":"","body":"新启程 以下是第一个 C++ 语言程序，也是新启程的开始。 #include using namespace std; int main(int argc, char const *argv[]) { cout 由于 C 和 C++ 两种编程语言有许多相似之处，在此仅展示 C++ 重要功能特性，可以 前往此处 了解 C 语言的更多信息。 "},"docs/程序设计基础.html":{"url":"docs/程序设计基础.html","title":"程序设计基础","keywords":"","body":"程序设计基础 读取输入 变量声明 类型转换 "},"docs/程序设计基础/读取输入.html":{"url":"docs/程序设计基础/读取输入.html","title":"读取输入","keywords":"","body":"读取输入 执行下面的代码，从键盘读取输入。 #include using namespace std; int main(int argc, char const *argv[]) { int x; cin >> x; cout 也可以用一条语句读取多个输入。 #include using namespace std; int main(int argc, char const *argv[]) { int x, y, z; cin >> x >> y >> z; cout "},"docs/程序设计基础/变量声明.html":{"url":"docs/程序设计基础/变量声明.html","title":"变量声明","keywords":"","body":"变量声明 C++ 允许使用另一种语法来声明和初始化变量。 #include using namespace std; int main(int argc, char const *argv[]) { int x(233); float y(6.66); cout "},"docs/程序设计基础/类型转换.html":{"url":"docs/程序设计基础/类型转换.html","title":"类型转换","keywords":"","body":"类型转换 C++ 允许通过转换运算符把数据由一种数据类型显式转换为另一种数据类型。 #include using namespace std; int main(int argc, char const *argv[]) { cout (6.66) (1) / 2 "},"docs/程序设计基础/布尔类型.html":{"url":"docs/程序设计基础/布尔类型.html","title":"布尔类型","keywords":"","body":"布尔类型 保存布尔值的变量称为布尔变量。 #include using namespace std; int main(int argc, char const *argv[]) { bool flag = true; cout "},"docs/程序设计基础/字符串类型.html":{"url":"docs/程序设计基础/字符串类型.html","title":"字符串类型","keywords":"","body":"字符串类型 #include using namespace std; int main(int argc, char const *argv[]) { string str = \"Hello World!\"; cout "},"docs/程序设计基础/字符串连接.html":{"url":"docs/程序设计基础/字符串连接.html","title":"字符串连接","keywords":"","body":"字符串连接 执行下面的代码，连接两个字符串。 #include using namespace std; int main(int argc, char const *argv[]) { string str1 = \"Hello\"; string str2 = \" World!\"; cout "},"docs/程序设计基础/字符串比较.html":{"url":"docs/程序设计基础/字符串比较.html","title":"字符串比较","keywords":"","body":"字符串比较 执行下面的代码，将字符串从左到右每一个字符对应比较。 #include using namespace std; int main(int argc, char const *argv[]) { string str1 = \"ABC\"; string str2 = \"ABE\"; cout str2) = str2) "},"docs/程序设计基础/格式化输出.html":{"url":"docs/程序设计基础/格式化输出.html","title":"格式化输出","keywords":"","body":"格式化输出 执行下面的代码，给一个浮点数指定总的显示位数。 #include #include using namespace std; int main(int argc, char const *argv[]) { float f = 12.3456; cout 执行下面的代码，强制数字显示为非科学计数法的形式。 #include using namespace std; int main(int argc, char const *argv[]) { cout 可以结合以上操作来强制显示小数点后的位数。 #include #include using namespace std; int main(int argc, char const *argv[]) { double d1 = 345.4567; double d2 = 78676.887234; cout 也可以使用下面的方法来强制浮点数显示小数点。 #include #include using namespace std; int main(int argc, char const *argv[]) { cout 执行下面的代码，指定输出的最小列数。 #include #include using namespace std; int main(int argc, char const *argv[]) { cout 执行下面的代码，指定输出的最小列数，并分别设置输出为右对齐和左对齐。 #include #include using namespace std; int main(int argc, char const *argv[]) { cout "},"docs/程序设计基础/文件输入输出.html":{"url":"docs/程序设计基础/文件输入输出.html","title":"文件输入输出","keywords":"","body":"文件输入输出 "}}